package main

import (
	"bufio"
	"go/format"
	"log"
	"os"
	"strings"
)

const (
	rootPath     = "github.com/ituoga/salt-core/"
	pluginPath   = rootPath+"modules/"
	pluginFSPath = "modules/"
	pluginFile   = "modules.cfg"
	header       = "// generated by go generate; DO NOT EDIT\n\n"
)

func main() {
	mi := make(map[string]string, 0)
	md := []string{}

	file, err := os.Open(pluginFile)
	if err != nil {
		log.Fatalf("Failed to open %s: %q", pluginFile, err)
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)
	for scanner.Scan() {
		line := scanner.Text()
		if strings.HasPrefix(line, "#") {
			continue
		}

		items := strings.Split(line, ":")
		if len(items) != 2 {
			// ignore empty lines
			continue
		}
		name, repo := items[0], items[1]

		if _, ok := mi[name]; ok {
			log.Fatalf("Duplicate entry %q", name)
		}

		md = append(md, name)
		mi[name] = pluginPath + repo // Default, unless overridden by 3rd arg

		if _, err := os.Stat(pluginFSPath + repo); err != nil { // External package has been given
			mi[name] = repo
		}
	}

	genImports("modules.go", "main", mi)
}
func genImports(file, pack string, mi map[string]string) {
	outs := header + "package " + pack + "\n\n" + "import ("

	if len(mi) > 0 {
		outs += "\n"
	}

	outs += "// Include all plugins.\n"
	// outs += `"` + rootPath + `shared"` + "\n"
	for s, v := range mi {
		_ = s
		outs += `_ "` + v + `"` + "\n"
		// outs += s + ` "` + v + `"` + "\n"
	}
	outs += ")\n"

	/*
	outs += `
		func init() {
	`
	for s, _ := range mi {
		outs += `shared.RegisterModule("` + s + `", ` + s + `.OnInit)`
		// outs += `_ "` + v + `"` + "\n"
		outs += `
			for _, topic := range ` + s + `.Exports {
					shared.URLRegistry.SetURL("` + s + `"+"/"+topic, "` + s + `"+"."+topic)
			}
		`
	}
	outs += `
		}
	`
*/
	if err := formatAndWrite(file, outs); err != nil {
		log.Fatalf("Failed to format and write: %q", err)
	}
}

func formatAndWrite(file string, data string) error {
	res, err := format.Source([]byte(data))
	if err != nil {
		return err
	}

	if err = os.WriteFile(file, res, 0644); err != nil {
		return err
	}
	return nil
}
